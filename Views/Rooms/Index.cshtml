@using X.PagedList.Mvc.Core
@using X.PagedList
@using X.PagedList.Web.Common
@model X.PagedList.IPagedList<RentalService.Models.Room>
@{
    ViewData["Title"] = "Tìm phòng";
    var buildings = ViewBag.Buildings as List<RentalService.Models.Building>;
    var selectedBuildingId = ViewBag.SelectedBuildingId as Guid?;
}
<link rel="stylesheet" href="~/css/room-cards.css" />
<div class="d-flex flex-wrap gap-2 mb-3">
    <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary"><i class="fa-solid fa-gauge-high"></i> Bảng điều khiển</a>
    <a href="@Url.Action("Index", "Favorites")" class="btn btn-outline-danger"><i class="fa-solid fa-heart"></i> Yêu thích</a>
    <a href="@Url.Action("Index", "BookingRequests")" class="btn btn-outline-info"><i class="fa-solid fa-envelope-open-text"></i> Đặt phòng</a>
    <a href="@Url.Action("Index", "ViewAppointments")" class="btn btn-outline-success"><i class="fa-solid fa-calendar-check"></i> Lịch hẹn</a>
</div>
<h2>Tìm phòng</h2>
<div class="row">
    <div class="col-md-3">
        <form method="get" id="roomFilterForm">
            @Html.Partial("_RoomFilterSidebar")
        </form>
    </div>
    <div class="col-md-9">
        <div class="d-flex justify-content-center mt-4">
            @Html.PagedListPager(Model, page => Url.Action("Index", new
                {
                    page,
                    location = Context.Request.Query["location"],
                    minPrice = Context.Request.Query["minPrice"],
                    maxPrice = Context.Request.Query["maxPrice"],
                    buildingId = Context.Request.Query["buildingId"],
                    sort = Context.Request.Query["sort"],
                    amenities = Context.Request.Query["amenities"]
                }), new PagedListRenderOptions
       {
           UlElementClasses = new[] { "pagination" },
           LiElementClasses = new[] { "page-item" },
           PageClasses = new[] { "page-link" }
       })
        </div>
        <div class="row g-4">
            @foreach (var room in Model)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="room-card clickable-card" tabindex="0" onclick="if(event.target.tagName !== 'A' && event.target.tagName !== 'BUTTON'){ window.location='@Url.Action("Details", new { id = room.Id })'; }" onkeydown="if(event.key==='Enter' && event.target===this){ window.location='@Url.Action("Details", new { id = room.Id })'; }">
                        @if (room.RoomImages != null && room.RoomImages.Count > 0 && !string.IsNullOrEmpty(room.RoomImages[0].ImageUrl))
                        {
                            <img src="@room.RoomImages[0].ImageUrl" alt="Room Image" class="room-card-img" onerror="this.onerror=null;this.src='/images/no-image.png';" />
                        }
                        else if (room.Images != null && room.Images.Count > 0 && !string.IsNullOrEmpty(room.Images[0].ImageUrl))
                        {
                            <img src="@room.Images[0].ImageUrl" alt="Room Image" class="room-card-img" onerror="this.onerror=null;this.src='/images/no-image.png';" />
                        }
                        else
                        {
                            <img src="/images/no-image.png" alt="No Image" class="room-card-img" />
                        }
                        <div class="room-card-body">
                            <div class="room-card-title d-flex align-items-center justify-content-between">
                                <span>@room.Name</span>
                                @if (room.Reviews != null && room.Reviews.Count > 0)
                                {
                                    var avg = room.Reviews.Average(r => r.Rating);
                                    <span class="ms-2 small text-warning">@Html.Raw(RenderStars(avg)) <span class="text-muted">@avg.ToString("0.0")</span></span>
                                }
                            </div>
                            <div class="room-card-location"><i class="fa-solid fa-location-dot"></i> @room.Building?.Address</div>
                            <div class="room-card-price">@room.Price.ToString("N0") ₫</div>
                            <div class="room-card-amenities">
                                @if (room.Amenities != null && room.Amenities.Count > 0)
                                {
                                    <span><i class="fa-solid fa-list"></i> @string.Join(", ", room.Amenities.Take(3).Select(a => a.Name))</span>
                                    @if (room.Amenities.Count > 3)
                                    {
                                        <span> +@((room.Amenities.Count - 3)) tiện ích khác</span>
                                    }
                                }
                            </div>
                            <div class="room-card-link">
                                <a href="@Url.Action("Details", new { id = room.Id })" class="btn btn-outline-primary btn-sm">Chi tiết</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="d-flex justify-content-center mt-4">
            @Html.PagedListPager(Model, page => Url.Action("Index", new {
                page,
                location = Context.Request.Query["location"],
                minPrice = Context.Request.Query["minPrice"],
                maxPrice = Context.Request.Query["maxPrice"],
                buildingId = Context.Request.Query["buildingId"],
                sort = Context.Request.Query["sort"],
                amenities = Context.Request.Query["amenities"]
            }), new PagedListRenderOptions {
                UlElementClasses = new[] { "pagination" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" }
            })
        </div>
        @if (!Model.Any())
        {
            <div class="alert alert-info mt-4">No rooms found.</div>
        }
    </div>
</div>
@section Scripts {
    <script>
        // Chỉ submit form khi click nút Lọc
        document.getElementById('roomFilterForm').addEventListener('submit', function(e) {
            // Không cần gì thêm, submit mặc định
        });
        // Khi thay đổi sort thì submit luôn
        document.querySelector('select[name="sort"]').addEventListener('change', function() {
            @* document.getElementById('roomFilterForm').submit(); *@
        });
    </script>
}
@functions {
    private string RenderStars(double rating)
    {
        int full = (int)rating;
        bool half = (rating - full) >= 0.5;
        int empty = 5 - full - (half ? 1 : 0);
        var html = string.Concat(Enumerable.Repeat("<i class='fa fa-star text-warning'></i>", full));
        if (half) html += "<i class='fa fa-star-half-alt text-warning'></i>";
        html += string.Concat(Enumerable.Repeat("<i class='fa fa-star text-secondary'></i>", empty));
        return html;
    }
}
