@* Sidebar filter for room search *@
@{
    var amenities = ViewBag.Amenities as List<RentalService.Models.Amenity>;
    var selectedAmenities = Context.Request.Query["amenities"].ToString().Split(',', System.StringSplitOptions.RemoveEmptyEntries);
    var minPrice = Context.Request.Query["minPrice"];
    var maxPrice = Context.Request.Query["maxPrice"];
    var minArea = Context.Request.Query["minArea"];
    var maxArea = Context.Request.Query["maxArea"];
    var sort = Context.Request.Query["sort"];
    var radius = Context.Request.Query["radius"];
    var centerLat = Context.Request.Query["centerLat"];
    var centerLng = Context.Request.Query["centerLng"];
    var advanceAddress = Context.Request.Query["advanceAddress"];
    var hasAdvance = !string.IsNullOrEmpty(radius) && !string.IsNullOrEmpty(centerLat) && !string.IsNullOrEmpty(centerLng);
    // Sắp xếp tiện ích đã chọn lên đầu
    if (amenities != null && selectedAmenities.Length > 0)
    {
        amenities = amenities.OrderByDescending(a => selectedAmenities.Contains(a.Id.ToString())).ToList();
    }
}
<div class="p-3 bg-light rounded shadow-sm mb-4">
    <h5>Bộ lọc</h5>
    <div class="mb-3">
        <label class="form-label">Sắp xếp</label>
        <select name="sort" class="form-select">
            @if (string.IsNullOrEmpty(sort))
            {
                <option value="" selected>Mặc định</option>
            }
            else
            {
                <option value="">Mặc định</option>
            }
            @if (sort == "price_asc")
            {
                <option value="price_asc" selected>Giá tăng dần</option>
            }
            else
            {
                <option value="price_asc">Giá tăng dần</option>
            }
            @if (sort == "price_desc")
            {
                <option value="price_desc" selected>Giá giảm dần</option>
            }
            else
            {
                <option value="price_desc">Giá giảm dần</option>
            }
            @if (sort == "rating_desc")
            {
                <option value="rating_desc" selected>Đánh giá cao nhất</option>
            }
            else
            {
                <option value="rating_desc">Đánh giá cao nhất</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label class="form-label">Giá (VND)</label>
        <div class="d-flex align-items-center gap-2">
            <input type="number" name="minPrice" class="form-control" placeholder="Từ" value="@minPrice" min="0" style="max-width:100px;" />
            <span>-</span>
            <input type="number" name="maxPrice" class="form-control" placeholder="Đến" value="@maxPrice" min="0" style="max-width:100px;" />
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">Diện tích (m²)</label>
        <div class="d-flex align-items-center gap-2">
            <input type="number" name="minArea" class="form-control" placeholder="Từ" value="@minArea" min="0" style="max-width:100px;" step="0.1" />
            <span>-</span>
            <input type="number" name="maxArea" class="form-control" placeholder="Đến" value="@maxArea" min="0" style="max-width:100px;" step="0.1" />
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">Tiện ích</label>
        <div class="d-flex flex-wrap gap-2 amenities-list expanded" id="amenitiesList" style="max-height:180px;overflow:auto;">
            @if (amenities != null)
            {
                foreach (var a in amenities)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="amenities" value="@a.Id" id="amenity_@a.Id" @(selectedAmenities.Contains(a.Id.ToString()) ? "checked" : "") />
                        <label class="form-check-label" for="amenity_@a.Id">@a.Name</label>
                    </div>
                }
            }
        </div>
        <div class="d-flex justify-content-center">
            <button class="toggle-btn mt-1" type="button" id="toggleAmenitiesBtn"><i class="fa fa-chevron-down ms-1"></i></button>
        </div>
    </div>
    <button class="toggle-btn-advance mb-2" type="button" id="toggleAdvanceBtn"><span>Tìm kiếm nâng cao</span> <i class="fa fa-chevron-down ms-1"></i></button>
    <div id="advanceOptions" style="display:@(hasAdvance ? "block" : "none")">
        <div class="mb-3">
            <label class="form-label">Địa điểm cụ thể</label>
            <input type="text" class="form-control" id="advanceAddress" name="advanceAddress" placeholder="Nhập địa chỉ hoặc chọn trên bản đồ" autocomplete="off" value="@advanceAddress" />
        </div>
        <div class="mb-3">
            <label class="form-label">Chọn vị trí trên bản đồ</label>
            <div id="advanceMap" style="height: 250px;"></div>
        </div>
        <div class="mb-3">
            <label class="form-label">Bán kính (km)</label>
            <input type="number" min="0.1" step="0.1" name="radius" class="form-control" placeholder="Nhập bán kính" value="@radius" />
        </div>
        <input type="hidden" name="centerLat" id="advanceLat" value="@centerLat" />
        <input type="hidden" name="centerLng" id="advanceLng" value="@centerLng" />
    </div>
    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary w-100">Áp dụng</button>
        <button type="button" class="btn btn-secondary w-100" id="resetFilterBtn">Đặt lại</button>
    </div>
    <style>
    .toggle-btn {
        background: none;
        border: none;
        color: #0d6efd;
        font-weight: 500;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: color 0.2s;
        margin: 0 auto;
        width: 100%;
    }
    .toggle-btn:focus {
        outline: none;
        color: #0a58ca;
    }
    .toggle-btn .fa-chevron-down {
        transition: transform 0.3s;
    }
    .toggle-btn.expanded .fa-chevron-down {
        transform: rotate(180deg);
    }
    .amenities-list {
        transition: max-height 0.5s cubic-bezier(0.4,0,0.2,1);
        will-change: max-height;
        overflow: hidden;
    }
    .amenities-list.collapsed {
        max-height: 40px !important;
        overflow: hidden !important;
        mask-image: linear-gradient(to bottom, black 60%, transparent 100%);
    }
    .amenities-list.expanded {
        max-height: 1000px !important;
        mask-image: none;
    }
    .amenities-list.scrolling {
        overflow-y: auto !important;
    }
    .toggle-btn-advance {
        background: none;
        border: none;
        color: #198754;
        font-weight: 500;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        transition: color 0.2s;
    }
    .toggle-btn-advance:focus {
        outline: none;
        color: #145c32;
    }
    .toggle-btn-advance .fa-chevron-down {
        transition: transform 0.3s;
    }
    .toggle-btn-advance.expanded .fa-chevron-down {
        transform: rotate(180deg);
    }
    </style>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script>
document.addEventListener('DOMContentLoaded', function() {
    var map = null;
    var amenitiesList = document.getElementById('amenitiesList');
    var toggleAmenitiesBtn = document.getElementById('toggleAmenitiesBtn');
    var collapsed = false;
    if (toggleAmenitiesBtn && amenitiesList) {
        // Đảm bảo không có scroll khi đang transition
        amenitiesList.addEventListener('transitionend', function(e) {
            if (!collapsed && amenitiesList.classList.contains('expanded')) {
                amenitiesList.classList.add('scrolling');
            } else {
                amenitiesList.classList.remove('scrolling');
            }
        });
        toggleAmenitiesBtn.onclick = function() {
            collapsed = !collapsed;
            if (collapsed) {
                amenitiesList.classList.remove('expanded');
                amenitiesList.classList.add('collapsed');
                toggleAmenitiesBtn.classList.remove('expanded');
                amenitiesList.classList.remove('scrolling');
            } else {
                amenitiesList.classList.remove('collapsed');
                amenitiesList.classList.add('expanded');
                toggleAmenitiesBtn.classList.add('expanded');
                // Đợi transitionend mới thêm scrolling
            }
        };
        // Mặc định là mở rộng
        amenitiesList.classList.add('expanded');
        toggleAmenitiesBtn.classList.add('expanded');
        // Đảm bảo scroll chỉ hiện khi đã mở rộng xong
        setTimeout(function() { amenitiesList.classList.add('scrolling'); }, 600);
    }
    // Prevent form submit on Enter
    var filterForm = document.getElementById('roomFilterForm');
    if (filterForm) {
        filterForm.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                // Allow Enter for textarea, but not for input
                if (e.target.tagName !== 'TEXTAREA') {
                    e.preventDefault();
                    return false;
                }
            }
        });
        // Reset filter logic
        var resetBtn = document.getElementById('resetFilterBtn');
        if (resetBtn) {
            resetBtn.onclick = function() {
                // Uncheck all amenities
                var amenityCheckboxes = filterForm.querySelectorAll('input[name="amenities"]');
                amenityCheckboxes.forEach(function(cb) { cb.checked = false; });
                // Reset price fields
                filterForm.querySelector('input[name="minPrice"]').value = '';
                filterForm.querySelector('input[name="maxPrice"]').value = '';
                // Reset area fields
                filterForm.querySelector('input[name="minArea"]').value = '';
                filterForm.querySelector('input[name="maxArea"]').value = '';
                // Reset sort
                filterForm.querySelector('select[name="sort"]').selectedIndex = 0;
                // Reset advanced fields
                var radius = filterForm.querySelector('input[name="radius"]');
                if (radius) radius.value = '';
                var advanceAddress = filterForm.querySelector('input[name="advanceAddress"]');
                if (advanceAddress) advanceAddress.value = '';
                var advanceLat = filterForm.querySelector('input[name="centerLat"]');
                var advanceLng = filterForm.querySelector('input[name="centerLng"]');
                if (advanceLat) advanceLat.value = '';
                if (advanceLng) advanceLng.value = '';
                // Reset map marker to default if map exists
                if (map) {
                    var defaultLat = 21.0285, defaultLng = 105.8542;
                    map.setView([defaultLat, defaultLng], 13);
                    if (typeof marker !== 'undefined') {
                        marker.setLatLng([defaultLat, defaultLng]);
                    }
                }
            };
        }
    }
    // Tìm kiếm nâng cao
    var toggleBtn = document.getElementById('toggleAdvanceBtn');
    var advanceOptions = document.getElementById('advanceOptions');
    var advanceExpanded = advanceOptions && advanceOptions.style.display !== 'none';
    if (toggleBtn && advanceOptions) {
        toggleBtn.onclick = function(e) {
            e.preventDefault();
            advanceExpanded = !advanceExpanded;
            advanceOptions.style.display = advanceExpanded ? 'block' : 'none';
            if (advanceExpanded) {
                toggleBtn.classList.add('expanded');
            } else {
                toggleBtn.classList.remove('expanded');
            }
            // Nếu vừa mở ra thì invalidateSize cho map
            if (advanceExpanded && map) {
                setTimeout(function() { map.invalidateSize(); }, 200);
            }
        };
        // Set trạng thái icon ban đầu
        if (advanceExpanded) toggleBtn.classList.add('expanded');
        else toggleBtn.classList.remove('expanded');
    }
    // Map init
    if (document.getElementById('advanceMap')) {
        var defaultLat = 21.0285, defaultLng = 105.8542;
        var lat = document.getElementById('advanceLat').value || defaultLat;
        var lng = document.getElementById('advanceLng').value || defaultLng;
        lat = parseFloat(lat); lng = parseFloat(lng);
        map = L.map('advanceMap').setView([lat, lng], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }).addTo(map);
        var marker = L.marker([lat, lng], { draggable: true }).addTo(map);
        function setAdvanceLocation(lat, lng) {
            marker.setLatLng([lat, lng]);
            map.setView([lat, lng], 16);
            document.getElementById('advanceLat').value = lat;
            document.getElementById('advanceLng').value = lng;
        }
        marker.on('dragend', function (e) {
            let pos = marker.getLatLng();
            setAdvanceLocation(pos.lat, pos.lng);
        });
        var addressInput = document.getElementById('advanceAddress');
        if (addressInput) {
            let debounceTimeout = null;
            addressInput.addEventListener('input', function () {
                let address = this.value;
                if (debounceTimeout) clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(function() {
                    if (!address) return;
                    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                        .then(res => res.json())
                        .then(function(data) {
                            if (data && data.length > 0) {
                                setAdvanceLocation(data[0].lat, data[0].lon);
                            }
                        });
                }, 500);
            });
        }
        // Nếu map đang hiển thị (advanceOptions mở sẵn), invalidateSize sau 200ms
        var adv = document.getElementById('advanceOptions');
        if (adv && adv.style.display !== 'none') {
            setTimeout(function() { map.invalidateSize(); }, 200);
        }
    }
});
</script>
</div>
